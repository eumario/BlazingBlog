@page "/admin/setup"
@using BlazingBlog.Models;

@inject NavigationManager NavigationManager
@inject UserService UserService

@if (_isProcessing)
{
    <div class="overlay position-fixed"></div>
    <div class="loading-wrapper position-fixed d-flex justify-content-center align-items-center">
        <div class="loading-text fs-1 text-white">Registering user...</div>
    </div>
}

<EditForm Model="_model" OnValidSubmit="RegisterAsync">
    <DataAnnotationsValidator/>
    <div class="container mt-5 d-flex justify-content-center">
        <div class="card bg-dark" style="width: 450px">
            <div class="card-header"><h2>Setup</h2></div>
            <div class="card-body">
                <div class="mb-3">
                    <label class="form-label">First Name</label>
                    <InputText @bind-Value="_model.FirstName" class="form-control" placeholder="Enter First Name"/>
                    <ValidationMessage For="() => _model.FirstName"/>
                </div>
                <div class="mb-3">
                    <label class="form-label">Last Name</label>
                    <InputText @bind-Value="_model.LastName" class="form-control" placeholder="Enter Last Name"/>
                    <ValidationMessage For="() => _model.LastName"/>
                </div>
                <div class="mb-3">
                    <label class="form-label">Email Address</label>
                    <InputText @bind-Value="_model.Email" class="form-control" placeholder="Enter Email Address"/>
                    <ValidationMessage For="() => _model.Email"/>
                </div>
                <div class="mb-3">
                    <label class="form-label">Password</label>
                    <InputText type="password" @bind-Value="_model.Password" class="form-control" placeholder="Enter Password"/>
                    <ValidationMessage For="() => _model.Password"/>
                </div>
                <div class="mb-3">
                    <label class="form-label">Confirm Password</label>
                    <InputText type="password" @bind-Value="_model.Confirm" class="form-control" placeholder="Enter Password Again"/>
                    <ValidationMessage For="() => _model.Confirm"/>
                </div>
                
                @if (!string.IsNullOrWhiteSpace(_error))
                {
                    <p class="text-danger">@_error</p>
                }
            </div>
            <div class="card-footer">
                <button type="submit" class="btn btn-success btn-sm">Register</button>
            </div>
        </div>
    </div>
</EditForm>


@code {
    private RegisterUser _model = new();                        

    private bool _isProcessing = false;
    private string? _error = null;

    private async Task RegisterAsync()
    {
        _error = null;
        _isProcessing = true;
        try
        {
            var res = await UserService.CreateUser(_model);
            if (res)
            {
                NavigationManager.NavigateTo("/login");
            }
            else
            {
                _error = "Unable to create account, please try again";
                _isProcessing = false;
            }
        }
        catch (Exception e)
        {
            _isProcessing = false;
            _error = e.Message;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        if (await UserService.IsBlogSetup())
        {
            NavigationManager.NavigateTo("/");
        }
        await base.OnInitializedAsync();
    }
}